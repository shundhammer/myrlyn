/*  ------------------------------------------------------
              __   _____  ____  _
              \ \ / / _ \|  _ \| | ____ _
               \ V / | | | |_) | |/ / _` |
                | || |_| |  __/|   < (_| |
                |_| \__\_\_|   |_|\_\__, |
                                    |___/
    ------------------------------------------------------

    Project:  YQPkg Package Selector
    Copyright (c) 2024 SUSE LLC
    License:  GPL V2 - See file LICENSE for details.

    Textdomain "qt-pkg"
 */


#include <QCheckBox>
#include <QComboBox>
#include <QElapsedTimer>
#include <QGroupBox>
#include <QKeyEvent>
#include <QLabel>
#include <QLineEdit>
#include <QLayout>
#include <QMessageBox>
#include <QProgressDialog>
#include <QPushButton>
#include <QSettings>

#include <zypp/PoolQuery.h>

#include "Exception.h"
#include "Logger.h"
#include "SearchFilter.h"
#include "QY2CursorHelper.h"
#include "QY2LayoutUtils.h"
#include "YQPkgSelector.h"
#include "YQi18n.h"
#include "utf8.h"

#include "YQPkgSearchFilterView.h"


using std::string;


YQPkgSearchFilterView::YQPkgSearchFilterView( QWidget * parent )
    : QWidget( parent )
    , _ui( new Ui::SearchFilterView )
{
    CHECK_NEW( _ui );
    _ui->setupUi( this ); // Actually create the widgets from the .ui form

    // See ui_wizard-page.h for the widget names.
    //
    // That header is generated by Qt's uic (user interface compiler)
    // from the XML .ui file created with Qt designer.
    //
    // Take care in Qt designer to give each widget a meaningful name in the
    // widget tree at the top right: They are also the member variable names
    // for the _ui object.


    connect( _ui->searchButton, SIGNAL( clicked() ),
             this,              SLOT  ( filter()  ) );

    connect( _ui->searchMode,   SIGNAL( currentIndexChanged( int ) ),
             this,              SLOT  ( searchModeChanged  ( int ) ) );

    connect( _ui->searchText,   SIGNAL( textEdited              ( QString ) ),
             this,              SLOT  ( updateDetectedFilterMode( QString ) ) );

    readSettings();
    updateDetectedFilterMode();
}


YQPkgSearchFilterView::~YQPkgSearchFilterView()
{
    writeSettings();
    delete _ui;
}


SearchFilter
YQPkgSearchFilterView::buildSearchFilterFromWidgets()
{
    SearchFilter searchFilter( _ui->searchText->text(),
                               (SearchFilter::FilterMode) _ui->searchMode->currentIndex() );
    searchFilter.setCaseSensitive( _ui->caseSensitive->isChecked() );

    return searchFilter;
}


void
YQPkgSearchFilterView::updateDetectedFilterMode( int index )
{
    if ( index < 0 )
        index = _ui->searchMode->currentIndex();

    SearchFilter::FilterMode searchMode = (SearchFilter::FilterMode)( index );

    if ( searchMode == SearchFilter::Auto )
    {
        updateDetectedFilterMode( _ui->searchText->text() );
    }
    else
    {
        _ui->detectedAutoMode->hide();
    }
}


void
YQPkgSearchFilterView::updateDetectedFilterMode( const QString & searchPattern )
{
    // This method is called when the user starts typing in _ui->searchText.
    // 'searchPattern' is the new content of the field.

    int index = _ui->searchMode->currentIndex();
    SearchFilter::FilterMode filterMode = (SearchFilter::FilterMode)( index );

    if ( filterMode != SearchFilter::Auto )
    {
        _ui->detectedAutoMode->hide();
        return;
    }

    SearchFilter::FilterMode detectedMode = SearchFilter::guessFilterMode( searchPattern );
    QString text;

    if ( detectedMode == SearchFilter::Auto || searchPattern.isEmpty() )
    {
        detectedMode = SearchFilter::StartsWith;  // Use the fallback

        // Translators: This is the default search filter mode.
        // %1 is a text from the combo box that is already translated.
        text = _( "Default: %1" );
    }
    else
    {
        // Translators: This is the detected search filter mode.
        // %1 is a text from the combo box that is already translated.
        text = _( "Detected: %1" );
    }

    // Use the text from the combo box because it's already translated
    QString filterText = _ui->searchMode->itemText( detectedMode );

    text = text.arg( filterText );

    _ui->detectedAutoMode->setText( text );
    _ui->detectedAutoMode->show();
}


void
YQPkgSearchFilterView::searchModeChanged( int index )
{
    updateDetectedFilterMode( index );
}


void
YQPkgSearchFilterView::keyPressEvent( QKeyEvent * event )
{
    if ( event )
    {
        if ( event->modifiers() == Qt::NoModifier ||    // No Ctrl / Alt / Shift etc. pressed
             event->modifiers() == Qt::KeypadModifier )
        {
            if ( event->key() == Qt::Key_Return ||
                 event->key() == Qt::Key_Enter    )
            {
                _ui->searchButton->animateClick();
                return;
            }
        }

    }

    QWidget::keyPressEvent( event );
}


void
YQPkgSearchFilterView::setFocus()
{
    _ui->searchText->setFocus();
}


void
YQPkgSearchFilterView::filterIfVisible()
{
    if ( isVisible() )
        filter();
}


void
YQPkgSearchFilterView::filter()
{
    emit filterStart();
    int matchCount = 0;

    try
    {
        if ( ! _ui->searchText->text().isEmpty() )
        {
            //
            // Build the query
            //

            SearchFilter searchFilter( buildSearchFilterFromWidgets() );

            // Use a zypp::PoolQuery for improved performance
            zypp::PoolQuery query;
            query.addKind( zypp::ResKind::package );
            string searchPattern = toUTF8( searchFilter.pattern() );
            query.setCaseSensitive( searchFilter.isCaseSensitive() );

            switch ( searchFilter.filterMode() )
            {
                case SearchFilter::Contains:
                    query.setMatchSubstring();
                    break;

                case SearchFilter::StartsWith:
                    query.setMatchRegex();
                    searchPattern = "^" + searchPattern;
                    break;

                case SearchFilter::ExactMatch:
                    query.setMatchExact();
                    break;

                case SearchFilter::Wildcard:
                    query.setMatchGlob();
                    break;

                case SearchFilter::RegExp:
                    query.setMatchRegex();
                    break;

                default:
                    logError() << "Unexpected search mode "
                               << SearchFilter::toString( searchFilter.filterMode() )
                               << " - falling back to 'Contains'"
                               << Qt::endl;
                    query.setMatchSubstring();
                    break;
            }

            query.addString( searchPattern );

            if ( _ui->searchInName->isChecked()        ) query.addAttribute( zypp::sat::SolvAttr::name );
            if ( _ui->searchInDescription->isChecked() ) query.addAttribute( zypp::sat::SolvAttr::description );
            if ( _ui->searchInSummary->isChecked()     ) query.addAttribute( zypp::sat::SolvAttr::summary );
            if ( _ui->searchInRequires->isChecked()    ) query.addAttribute( zypp::sat::SolvAttr( "solvable:requires" ) );
            if ( _ui->searchInProvides->isChecked()    ) query.addAttribute( zypp::sat::SolvAttr( "solvable:provides" ) );
            if ( _ui->searchInFileList->isChecked()    ) query.addAttribute( zypp::sat::SolvAttr::filelist );

            _ui->searchText->setEnabled( false );   // Disable for the duration of the search
            _ui->searchButton->setEnabled( false );

            QElapsedTimer queryTimer;
            queryTimer.start();

            //
            // Start the query and iterate over the results
            //

            for ( zypp::PoolQuery::Selectable_iterator it = query.selectableBegin();
                  it != query.selectableEnd();
                  ++it )
            {
                ZyppSel selectable = *it;
                ZyppPkg zyppPkg    = tryCastToZyppPkg( selectable->theObj() );

                if ( zyppPkg )
                {
                    matchCount++;
                    emit filterMatch( selectable, zyppPkg );
                }


                if ( queryTimer.elapsed() > 300 ) // milisec
                {
                    // Process events only every 300 milliseconds - this is very
                    // expensive since both the progress dialog and the package
                    // list change all the time, thus display updates are necessary
                    // each time.

                    qApp->processEvents();
                    queryTimer.restart();
                }
            }

            if ( matchCount == 0 )
                emit message( _( "No Results." ) );
        }
    }
    catch ( const std::exception & exception )
    {
        logWarning() << "CAUGHT zypp exception: " << exception.what() << Qt::endl;

        QMessageBox msgBox;

        // Translators: This is a (short) text indicating that something went
        // wrong while searching for packages. At this point, it is not clear
        // if it's a user error (e.g., syntax error in regular expression) or
        // an internal error. But there is a "Details" button that will return
        // the original (translated) error message.

        QString heading = _( "Query Error" );

        if ( heading.length() < 25 )    // Avoid very narrow message boxes
        {
            QString blanks;
            blanks.fill( ' ', 50 - heading.length() );
            heading += blanks;
        }

        msgBox.setText( heading );
        msgBox.setIcon( QMessageBox::Warning );
        msgBox.setInformativeText( fromUTF8( exception.what() ) );
        msgBox.exec();
    }

    _ui->searchText->setEnabled(true);   // Re-enable the widgets we disabled earlier
    _ui->searchButton->setEnabled(true);
    parentWidget()->parentWidget()->setCursor( Qt::ArrowCursor );

    emit filterFinished();
}


bool
YQPkgSearchFilterView::check( ZyppSel   selectable,
                              ZyppObj   zyppObj )
{
    if ( ! zyppObj )
        return false;

    SearchFilter searchFilter( buildSearchFilterFromWidgets() );

    bool match =
        ( _ui->searchInName->isChecked()        && searchFilter.matches( zyppObj->name()         ) ) ||
        ( _ui->searchInSummary->isChecked()     && searchFilter.matches( zyppObj->summary()      ) ) ||
        ( _ui->searchInDescription->isChecked() && searchFilter.matches( zyppObj->description()  ) ) ||
        ( _ui->searchInProvides->isChecked()    && checkCap( zyppObj->provides(), searchFilter   ) ) ||
        ( _ui->searchInRequires->isChecked()    && checkCap( zyppObj->requires(), searchFilter   ) );

    return match;
}


bool
YQPkgSearchFilterView::checkCap( zypp::Capabilities   capSet,
                                 const SearchFilter & searchFilter )
{
    for ( zypp::Capabilities::const_iterator it = capSet.begin();
	  it != capSet.end();
	  ++it )
    {
        zypp::CapDetail cap( *it );

	if ( cap.isSimple() && searchFilter.matches( cap.name().asString() ) )
	{
	    return true;
	}
    }

    return false;
}


void YQPkgSearchFilterView::readSettings()
{
    QSettings settings;
    settings.beginGroup( "PkgSearchFilterView" );

    _ui->searchInName->setChecked        ( settings.value( "searchInName",        true  ).toBool() );
    _ui->searchInSummary->setChecked     ( settings.value( "searchInSummary",     false ).toBool() );
    _ui->searchInDescription->setChecked ( settings.value( "searchInDescription", false ).toBool() );
    _ui->searchInProvides->setChecked    ( settings.value( "searchInProvides",    false ).toBool() );
    _ui->searchInRequires->setChecked    ( settings.value( "searchInRequires",    false ).toBool() );
    _ui->searchInFileList->setChecked    ( settings.value( "searchInFileList",    false ).toBool() );

    _ui->caseSensitive->setChecked       ( settings.value( "caseSensitive",       false ).toBool() );
    _ui->searchMode->setCurrentIndex     ( settings.value( "searchMode",          0     ).toInt() );

    settings.endGroup();
}


void YQPkgSearchFilterView::writeSettings()
{
    QSettings settings;
    settings.beginGroup( "PkgSearchFilterView" );

    settings.setValue( "searchInName",        _ui->searchInName->isChecked()        );
    settings.setValue( "searchInSummary",     _ui->searchInSummary->isChecked()     );
    settings.setValue( "searchInDescription", _ui->searchInDescription->isChecked() );
    settings.setValue( "searchInProvides",    _ui->searchInProvides->isChecked()    );
    settings.setValue( "searchInRequires",    _ui->searchInRequires->isChecked()    );
    settings.setValue( "searchInFileList",    _ui->searchInFileList->isChecked()    );

    settings.setValue( "caseSensitive",       _ui->caseSensitive->isChecked()       );
    settings.setValue( "searchMode",          _ui->searchMode->currentIndex()       );

    settings.endGroup();
}
